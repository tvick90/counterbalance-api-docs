{
  "openapi": "3.0.0",
  "info": {
    "title": "Users",
    "version": "1.2.2",
    "description": "The Users API provides endpoints for user account management, including:\n* Creating and managing user accounts, permission groups, and departments\n* Updating user photos\n* Assigning user roles & permissions\n* Tracking and auditing platform access\n* Allocating and managing user licensing\n* Maintaining personal platform preferences\n\n**User Types**\n\nUser accounts are of one of the following three types depending on the licensing assigned. \n\n* A `seat` is a licensed system administrator account with access to the Counterbalance Console\n* A `user` is a licensed end-user account with access to the Counterbalance Portal\n* A `record_user` is a _\"placeholder\"_ user account for a user that is tracked via Counterbalance but does not hold a license and cannot actively interact with the platform\n\n** Assigning Licensing **\n\nThe user license can be adjusted using the \n\nIf insufficient quota exists for the specified license type, a `403 Forbidden` error will be thrown and the license will not be assigned. ",
    "termsOfService": "https://www.counterbalance.io/legal/api-terms",
    "contact": {
      "name": "Taylor Vick",
      "email": "support@counterbalance.io"
    }
  },
  "servers": [
    {
      "url": "https://api.counterbalance.io",
      "description": "Production API"
    }
  ],
  "paths": {
    "/v1/user": {
      "get": {
        "summary": "List User Accounts",
        "tags": [
          "User Accounts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number",
                      "description": "The number of account objects returned"
                    },
                    "data": {
                      "type": "array",
                      "uniqueItems": true,
                      "description": "An array of user account objects",
                      "items": {
                        "$ref": "#/components/schemas/User-Account"
                      }
                    }
                  },
                  "required": [
                    "count",
                    "data"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "count": 1,
                      "data": [
                        {
                          "id": "5391c363-70f0-46bb-abd2-4eecd1574201",
                          "license": "record_user",
                          "flags": {
                            "active": true,
                            "blocked": false,
                            "licensed": false,
                            "archived": false,
                            "deleted": false
                          },
                          "picture": "https://api.counterbalance.io/v1/user/5391c363-70f0-46bb-abd2-4eecd1574201/photo",
                          "name": {
                            "given": "Diego",
                            "preferred": "",
                            "middle": "",
                            "family": "Siciliano",
                            "prefix": null,
                            "suffix": null,
                            "full": "Diego Siciliano",
                            "display": "Diego Siciliano",
                            "short": ""
                          },
                          "email": "diegos@peterbalance.com",
                          "site": null,
                          "department": null,
                          "manager": null,
                          "room": null,
                          "mail_stop": null,
                          "title": "",
                          "employee_id": "",
                          "org_guid": "",
                          "links": []
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "operationId": "get-user-list",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "description": "Retrieve a list of user accounts available to the authenticated user\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`user:*`,`user:account:*`,`user:account:list`\n* Licensed Feature: `user_base`\n\n**Variations**\n\nIf the `status` query paramter is not included with the request, only active user accounts are returned. \n\nQuery paramters are stacked. That is, if you specify a specific site and department, then only users that match BOTH of these parameters will be returned.\n\n**Returned User Scope**\n\nThis is a scoped endpoint and the data returned may not be a complete, conclusive listing of all resources in the tenant account.\n\nUsers with `*` & `user:*` permission scopes will always have access to the complete resource data set in the tenant.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "archived",
                "deleted",
                "all"
              ]
            },
            "in": "query",
            "name": "status",
            "description": ""
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "query",
            "name": "site",
            "description": "Return only the users assigned to the specified site ID"
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "query",
            "name": "department",
            "description": "Return only the users assigned to the specified department ID"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "auth_only",
            "description": "Return only the users with active auth accounts"
          }
        ]
      },
      "post": {
        "summary": "Create New User",
        "operationId": "create-user",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Account"
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "73f180ba-caa3-4e49-a68c-f643b5e7bf79",
                      "license": "record_user",
                      "flags": {
                        "active": true,
                        "blocked": false,
                        "licensed": false,
                        "archived": false,
                        "deleted": false
                      },
                      "picture": "https://api.counterbalance.io/v1/user/73f180ba-caa3-4e49-a68c-f643b5e7bf79/photo",
                      "auth": null,
                      "name": {
                        "given": "Megan",
                        "preferred": "",
                        "middle": "",
                        "family": "Bowen",
                        "prefix": null,
                        "suffix": null,
                        "full": "Megan Bowen",
                        "display": "Megan Bowen",
                        "short": ""
                      },
                      "email": "meganb@peterbalance.com",
                      "site": null,
                      "department": null,
                      "manager": null,
                      "room": null,
                      "mail_stop": null,
                      "title": "",
                      "links": [],
                      "milestones": {
                        "accepted_terms": {
                          "status": false,
                          "timestamp": 0
                        },
                        "completed_onboarding": {
                          "status": false,
                          "timestamp": 0
                        },
                        "account_created": {
                          "status": true,
                          "timestamp": 1604882067
                        },
                        "account_blocked": {
                          "status": false,
                          "timestamp": 0
                        },
                        "account_archived": {
                          "status": false,
                          "timestamp": 0
                        },
                        "license_assigned": {
                          "status": false,
                          "timestamp": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/Error-Response.v1.yaml"
                },
                "examples": {
                  "Invalid User Type": {
                    "value": {
                      "error": {
                        "message": "Invalid user type",
                        "console": "foo is not a valid user type",
                        "code": 400
                      },
                      "logging_hash": "7420265096f60cd5015ab814f670ef15bbaeb61a"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Create a new user and optionally assign a license and password\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`user:*`,`user:account:*`,`user:account:create`\n* Licensed Feature: `user_base`\n* If adding a license, adequate quota of the requested type\n\n**Defining the User Type**\n\nThe field `type` may be one of either: \n\n* `record_user` _(non-licensed user)_\n* `seat` _(licensed system user)_ \n* `user` _(licensed end user)_.\n\nIf type is defined as either `seat` or `user`, the new user will be sent a notification email informing them of their new account. _As of February 2021, there is a pending request to disable this feature via query paramater_\n\nIf the `type` field is omitted, the user will default to `record_user`\n\n**Setting the User Password**\n\nThe `password` field is required when the user type specified is either `seat` or `user`. In all other cases, it is ignored.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "given_name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 90,
                    "description": "The user's first name"
                  },
                  "family_name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 90,
                    "description": "The user's last name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "title": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "record_user",
                      "seat",
                      "user"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Required for \"seat\" and \"user\" types"
                  }
                },
                "required": [
                  "given_name",
                  "family_name",
                  "email",
                  "type"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "given_name": "Megan",
                    "family_name": "Bowen",
                    "email": "meganb@peterbalance.com",
                    "type": "record_user",
                    "title": ""
                  }
                },
                "Example w/ Password": {
                  "value": {
                    "given_name": "Megan",
                    "family_name": "Bowen",
                    "email": "meganb@peterbalance.com",
                    "type": "seat",
                    "title": "",
                    "password": "Se@ttle1!"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "parameters": [],
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "tags": [
          "User Accounts"
        ]
      },
      "parameters": []
    },
    "/v1/user/{userId}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "A valid user account UUID _unless indicated otherwise_"
        }
      ],
      "get": {
        "summary": "Get User Account",
        "tags": [
          "User Accounts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Account"
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "ce48daca-f044-48e6-ad20-0c6e53db12da",
                      "license": "seat",
                      "flags": {
                        "active": true,
                        "blocked": false,
                        "licensed": true,
                        "archived": false,
                        "deleted": false
                      },
                      "picture": "https://api.counterbalance.io/v1/user/ce48daca-f044-48e6-ad20-0c6e53db12da/photo",
                      "auth": {
                        "email_verified": true,
                        "last_login": 1604815512,
                        "last_password_reset": 0,
                        "last_ip": "67.168.168.228",
                        "total_logins": 78,
                        "is_blocked": false
                      },
                      "name": {
                        "given": "Alex",
                        "preferred": "",
                        "middle": "",
                        "family": "Wilbur",
                        "prefix": null,
                        "suffix": null,
                        "full": "Alex Wilbur",
                        "display": "Alex Wilbur",
                        "short": ""
                      },
                      "email": "alexw@peterbalance.com",
                      "site": null,
                      "department": "1f3da4db-3364-4f58-b8bd-4fee1398a6e1",
                      "manager": null,
                      "room": null,
                      "mail_stop": null,
                      "title": "",
                      "links": [
                        {
                          "context": "Counterbalance ID",
                          "id": "auth0|5e93ab33f346950c46b694d5"
                        },
                        {
                          "context": "Microsoft 365",
                          "id": "201e0cc6-9b88-4908-a69e-60e88b4d9ff7"
                        }
                      ],
                      "milestones": {
                        "accepted_terms": {
                          "status": true,
                          "timestamp": 1586735922
                        },
                        "completed_onboarding": {
                          "status": false,
                          "timestamp": 0
                        },
                        "account_created": {
                          "status": true,
                          "timestamp": 1586735922
                        },
                        "account_blocked": {
                          "status": false,
                          "timestamp": 0
                        },
                        "account_archived": {
                          "status": false,
                          "timestamp": 0
                        },
                        "license_assigned": {
                          "status": true,
                          "timestamp": 1586735923
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/Error-Response.v1.yaml"
                },
                "examples": {
                  "User Not Found": {
                    "value": {
                      "error": {
                        "message": "User not found",
                        "console": "A user with ID 54d71164-9ea1-4a58-a232-930df7418c4c could not be found in the database",
                        "code": 404
                      },
                      "logging_hash": "daa4ceb0a1d0434987e2e536318f4140ad537560"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-user-profile",
        "parameters": [],
        "description": "Retrieve the specified user account\n\n<!-- theme: success -->\n> _**Note:** This endpoint accepts `self` in place of a UUID_\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\nWhen using a UUID:\n* An active tenant account\n* Permissions _(at least one):_ `*`,`user:*`,`user:account:*`,`user:account:read`\n* Licensed Feature: `user_base`\n\nWhen using self:\n* Permissions _(at least one):_ `*`,`user:*`,`user:self:*`,`user:self:read`",
        "security": [
          {
            "Bearer Token": []
          }
        ]
      },
      "patch": {
        "summary": "Update User Account",
        "operationId": "update-user-profile",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Account"
                }
              }
            }
          },
          "404": {
            "description": "User Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/Error-Response.v1.yaml"
                },
                "examples": {
                  "User Not Found": {
                    "value": {
                      "error": {
                        "message": "User not found",
                        "console": "A user with ID 54d71164-9ea1-4a58-a232-930df7418c4c could not be found in the database",
                        "code": 404
                      },
                      "logging_hash": "daa4ceb0a1d0434987e2e536318f4140ad537560"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Update the specified user account\n\n<!-- theme: success -->\n> _**Note:** This endpoint accepts `self` in place of a UUID_\n\nSome body fields are marked as _**required**._ This indicates that if they are included in the body of a request, they cannot be empty strings or null values.\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\nWhen using a UUID:\n* An active tenant account\n* Permissions _(at least one):_ `*`,`user:*`,`user:account:*`,`user:account:update`\n* Licensed Feature: `user_base`\n\nWhen using self:\n* An active tenant account\n* Permissions _(at least one):_ `*`,`user:*`,`user:self:*`,`user:self:update`\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "given_name": {
                    "type": "string",
                    "description": "The user's first name"
                  },
                  "middle_name": {
                    "type": "string",
                    "description": "The user's middle name"
                  },
                  "family_name": {
                    "type": "string",
                    "description": "The user's last name"
                  },
                  "preferred_given_name": {
                    "type": "string",
                    "description": "The user's preferred first name"
                  },
                  "title": {
                    "type": "string",
                    "description": "The user's job title",
                    "maxLength": 90
                  },
                  "employee_id": {
                    "type": "string",
                    "description": "The user's employee ID"
                  },
                  "user_org_guid": {
                    "type": "string",
                    "description": "The user's alternate GUID"
                  },
                  "room": {
                    "type": "string",
                    "description": "The user's office or room number"
                  },
                  "mail_stop": {
                    "type": "string",
                    "description": "The user's mail stop"
                  },
                  "site": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "uuid",
                    "description": "The user's assigned site"
                  },
                  "manager": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "uuid",
                    "description": "The user's manager"
                  }
                },
                "required": [
                  "given_name",
                  "family_name"
                ]
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "tags": [
          "User Accounts"
        ]
      },
      "delete": {
        "summary": "Delete User Account",
        "operationId": "delete-user-account",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "User Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/Error-Response.v1.yaml"
                },
                "examples": {
                  "User Not Found": {
                    "value": {
                      "error": {
                        "message": "User not found",
                        "console": "A user with ID 54d71164-9ea1-4a58-a232-930df7418c4c could not be found in the database",
                        "code": 404
                      },
                      "logging_hash": "daa4ceb0a1d0434987e2e536318f4140ad537560"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Mark the specified user account for deletion\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`user:*`,`user:account:*`,`user:account:delete`\n\n**Account Retention & Restoration**\n\nWhen deleted, an account is merely marked for deletion and any associated auth account is blocked. The user can be restored for up to 30 days after it is permanently deleted using the Restore User Account endpoint. \n\n**Permanently Delete a User**\n\nTo permanently delete a user account, pass the `permanent` query parameter and set it to true. The account will be immediately and permanently removed from the system and cannot be restored. ",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "tags": [
          "User Accounts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "permanent",
            "description": "If true, the user will be permanently deleted and cannot be restored"
          }
        ]
      }
    },
    "/v1/user/{userId}/license": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "A valid user account UUID"
        }
      ],
      "put": {
        "summary": "Assign User Licensing",
        "operationId": "assign-user-licensing",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Account"
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "ce48daca-f044-48e6-ad20-0c6e53db12da",
                      "license": "seat",
                      "flags": {
                        "active": true,
                        "blocked": false,
                        "licensed": true,
                        "archived": false,
                        "deleted": false
                      },
                      "picture": "https://api.counterbalance.io/v1/user/ce48daca-f044-48e6-ad20-0c6e53db12da/photo",
                      "auth": {
                        "email_verified": true,
                        "last_login": 1604815512,
                        "last_password_reset": 0,
                        "last_ip": "67.168.168.228",
                        "total_logins": 78,
                        "is_blocked": false
                      },
                      "name": {
                        "given": "Alex",
                        "preferred": "",
                        "middle": "",
                        "family": "Wilbur",
                        "prefix": null,
                        "suffix": null,
                        "full": "Alex Wilbur",
                        "display": "Alex Wilbur",
                        "short": ""
                      },
                      "email": "alexw@peterbalance.com",
                      "site": null,
                      "department": "1f3da4db-3364-4f58-b8bd-4fee1398a6e1",
                      "manager": null,
                      "room": null,
                      "mail_stop": null,
                      "title": "",
                      "links": [
                        {
                          "context": "Counterbalance ID",
                          "id": "auth0|5e93ab33f346950c46b694d5"
                        },
                        {
                          "context": "Microsoft 365",
                          "id": "201e0cc6-9b88-4908-a69e-60e88b4d9ff7"
                        }
                      ],
                      "milestones": {
                        "accepted_terms": {
                          "status": true,
                          "timestamp": 1586735922
                        },
                        "completed_onboarding": {
                          "status": false,
                          "timestamp": 0
                        },
                        "account_created": {
                          "status": true,
                          "timestamp": 1586735922
                        },
                        "account_blocked": {
                          "status": false,
                          "timestamp": 0
                        },
                        "account_archived": {
                          "status": false,
                          "timestamp": 0
                        },
                        "license_assigned": {
                          "status": true,
                          "timestamp": 1586735923
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/Error-Response.v1.yaml"
                },
                "examples": {
                  "License Already Activated": {
                    "value": {
                      "error": {
                        "message": "License already activated",
                        "console": "Adele Vance is already assigned a record_user license and it cannot be assigned again",
                        "code": 400
                      },
                      "logging_hash": "212b317605514926303d36e9a341ef7ea46d0c08"
                    }
                  },
                  "Inactive User Account": {
                    "value": {
                      "error": {
                        "message": "Inactive user account",
                        "console": "Adele Vance is not an active user and cannot be assigned a license",
                        "code": 400
                      },
                      "logging_hash": "212b317605514926303d36e9a341ef7ea46d0c08"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/Error-Response.v1.yaml"
                },
                "examples": {
                  "User Not Found": {
                    "value": {
                      "error": {
                        "message": "User not found",
                        "console": "A user with ID 131acd64-f270-4718-80df-1821475d80ac could not be found in the database",
                        "code": 400
                      },
                      "logging_hash": "212b317605514926303d36e9a341ef7ea46d0c08"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Set the license type for the spcified user\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`tenant:*`,`tenant:licensing:*`,`tenant:licensing:assign`\n* Licensed Feature: `user_base`\n* Adequate quota of the requested type\n\n**Setting the License Type**\n\nThe field `type` must be either `record_user` _(non-licensed user)_, `seat` _(licensed system administrator)_, or `user` _(licensed end user)_.\n\n<!-- theme: danger -->\n> _**Danger!** Downgrading a user to the `record_user` license will delete the user's Counterbalance ID account_\n\n**Setting the User Password**\n\nThe `password` field is required when the user type specified is either `seat` or `user`. In all other cases, it is ignored.\n\n**Notifying the User**\n\nComing soon...\n",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of license to assign the user",
                    "enum": [
                      "record_user",
                      "user",
                      "seat"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Required for \"seat\" and \"user\" types"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "type": "seat",
                    "password": "Se@ttle1!"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Licensing"
        ]
      }
    },
    "/v1/user/self/preferences": {
      "parameters": [],
      "get": {
        "summary": "Get User Preferences",
        "tags": [
          "User Preferences"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Preferences"
                },
                "examples": {
                  "Response": {
                    "value": {
                      "shell": {
                        "theme": "#161d1b",
                        "nav": {
                          "collapsed": true,
                          "disabled_applications": []
                        },
                        "pagination": {
                          "enabled": false,
                          "default_limit": 10
                        },
                        "disabled_applications": []
                      }
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              },
              "text/html": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "operationId": "get-user-preferences",
        "description": "Get the preferences for the currently authenticated user\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`console:view`",
        "security": [
          {
            "Bearer Token": []
          }
        ]
      },
      "patch": {
        "summary": "Update User Preferences",
        "operationId": "patch-v1-user-self-preferences",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Update the preferences for the currently authenticated user\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`console:view`",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "tags": [
          "User Preferences"
        ]
      }
    },
    "/v1/user/{userId}/photo": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "A valid user account UUID"
        }
      ],
      "get": {
        "summary": "Get User Photo",
        "tags": [
          "User Photo"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "null"
                },
                "examples": {}
              }
            }
          }
        },
        "operationId": "get-user-photo",
        "description": "Get the specified user's photo in PNG format\n\n<!--theme: warning-->\n> _**Heads Up: ** This is a public endpoint and does not require authentication_\n\n**Prerequisites** \n\n_None_\n\n**Using this Endpoint in HTML**\n\nThis endpoint can be used as the `src` attribute of an HTML `img` tag.\n```html\n<img src=\"https://api.counterbalance.io/v1/user/{userId}/photo\">\n```",
        "parameters": []
      },
      "post": {
        "summary": "Upload a Custom Photo",
        "operationId": "post-v1-user-userId-photo",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {}
          }
        },
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "description": "Upload a custom photo for the specified user\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`user:*`,`user:account:*`,`user:account:update`\n* Licensed Feature: `user_base`\n\n**Photo Requirements**\n\nThe uploaded photo must meet the following criteria:\n\n* `jpeg` or `png` format\n* Square, equal dimensions\n* Greater than 250px but less than 1000px \n",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "null"
              }
            }
          },
          "description": "POST a JPEG or PNG fle as binary data"
        },
        "tags": [
          "User Photo"
        ]
      }
    },
    "/v1/user/{userId}/roles": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get User's Assigned Roles",
        "tags": [
          "Roles"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Assigned-Roles"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "roles": [
                        "rol_ef4g..."
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-v1-user-userId-roles",
        "description": "Retrieve a list of roles assigned to a user\n\n> This endpoint accepts `self` in place of a UUID",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": []
      }
    },
    "/v1/user/{userId}/password": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "A valid user account UUID _unless indicated otherwise_"
        }
      ],
      "put": {
        "summary": "Set User Password",
        "operationId": "set-user-password",
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "The user's new password",
                    "format": "password"
                  }
                },
                "required": [
                  "password"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "password": "Se@ttle1!"
                  }
                }
              }
            }
          }
        },
        "description": "Reset the password for the specified user\n\n<!-- theme: success -->\n> _**Note:** This endpoint accepts `self` in place of a UUID_\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\nWhen using a UUID:\n* An active tenant account\n* Permissions _(at least one):_ `*`,`user:*`,`user:account:*`,`user:account:update`\n\nWhen using self:\n* Permissions _(at least one):_ `*`,`user:*`,`user:self:*`,`user:self:password`\n\n**Password Strength**\n\nPassword strength is an important consideration when setting passwords for your users. Counterbalance enforces a strong password policy that has the following requirements:\n\n* Must be at least 8-characters in length\n* Lower case (a-z), upper case (A-Z) and numbers (0-9)\n* Special characters (!@#$%^&*)\n* No more than 2 identical characters in a row\n\nNIST recommends a minimum character length of 8, and suggests that length is a better indicator of strength than complexity.\n\n<!-- theme: warning -->\n> _**Note** A password will be rejected if it contains common dictionary phrases or the user's first name, last name, or shortname._\n\n**Password History**\n\nA new password must be different than the user's last 3 passwords. ",
        "tags": [
          "User Accounts"
        ]
      }
    },
    "/v1/user/{userId}/roles/{roleId}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "A valid user account UUID"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "roleId",
          "in": "path",
          "required": true,
          "description": "A valid role ID"
        }
      ],
      "put": {
        "summary": "Assign User Roles",
        "operationId": "put-v1-user-userId-roles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Assigned-Roles"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "roles": [
                        "rol_ef4g..."
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roles": {
                    "type": "array",
                    "description": "An array of role IDs to add",
                    "uniqueItems": true,
                    "minItems": 1,
                    "maxItems": 10,
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "roles"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "roles": [
                      "rol_ef4g..."
                    ]
                  }
                }
              }
            }
          },
          "description": ""
        },
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [],
        "description": "Assign one or more roles to a user",
        "tags": [
          "Roles"
        ]
      },
      "delete": {
        "summary": "Remove User Roles",
        "operationId": "delete-v1-user-userId-roles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Assigned-Roles"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "roles": []
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Remove one or more roles from a user",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/user/{userId}/permissions": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "A valid user account UUID"
        }
      ],
      "get": {
        "summary": "Get User Permissions",
        "tags": [
          "Permissions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Permissions"
                },
                "examples": {
                  "Example": {
                    "value": [
                      "billing:account:view",
                      "sites:*",
                      "tenant:*",
                      "user:account:*"
                    ]
                  }
                }
              }
            }
          }
        },
        "operationId": "get-user-permissions",
        "description": "Retrieve permissions for a given user\n\n<!-- theme: success -->\n> _**Note:** This endpoint accepts `self` in place of a UUID_\n\n_**February 2021: ** Retrieving users via UUID is not yet supported._\n\n**Prerequisites** \n\nThe following prerequisites are required for this endpoint:\n\nWhen using a UUID _(not yet supported)_:\n* An active tenant account\n* Permissions _(at least one):_ `*`,`user:*`,`user:account:*`,`user:permissions:*`,`user:account:read`,`user:permissions:read`\n\nWhen using self:\n* An active tenant account\n* Permissions _(at least one):_ `*`,`user:*`,`user:self:*`,`user:self:read`",
        "security": [
          {
            "Bearer Token": []
          }
        ]
      }
    },
    "/v1/department": {
      "get": {
        "summary": "List Departments",
        "tags": [
          "Departments"
        ],
        "responses": {},
        "operationId": "get-departments"
      },
      "post": {
        "summary": "Create New Department",
        "operationId": "create-department",
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "description": "",
        "tags": [
          "Departments"
        ]
      },
      "parameters": []
    },
    "/v1/department/{departmentId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "departmentId",
          "in": "path",
          "required": true,
          "description": "A valid department UUID"
        }
      ],
      "get": {
        "summary": "Get Department",
        "tags": [
          "Departments"
        ],
        "responses": {},
        "operationId": "get-v1-department-departmentId",
        "description": ""
      },
      "patch": {
        "summary": "Update Department",
        "operationId": "update-department",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Departments"
        ]
      },
      "delete": {
        "summary": "Delete Department",
        "operationId": "delete-department",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "",
        "tags": [
          "Departments"
        ]
      }
    },
    "/v1/user/group": {
      "get": {
        "summary": "List User Groups",
        "tags": [
          "Groups"
        ],
        "responses": {},
        "operationId": "get-v1-user-group"
      },
      "post": {
        "summary": "Create User Group",
        "operationId": "post-v1-user-group",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Groups"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "User-Account": {
        "description": "",
        "type": "object",
        "title": "User Account Object Model",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The user's UUID"
          },
          "license": {
            "type": "string",
            "enum": [
              "record_user",
              "user",
              "seat"
            ],
            "description": "The assigned license class"
          },
          "flags": {
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean"
              },
              "blocked": {
                "type": "boolean"
              },
              "licensed": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "deleted": {
                "type": "boolean"
              }
            }
          },
          "picture": {
            "type": "string",
            "minLength": 1,
            "description": "The URL for the user's avatar photo"
          },
          "auth": {},
          "name": {
            "type": "object",
            "properties": {
              "given": {
                "type": "string",
                "maxLength": 90
              },
              "preferred": {
                "type": "string",
                "maxLength": 90
              },
              "middle": {
                "type": "string",
                "maxLength": 90
              },
              "family": {
                "type": "string",
                "maxLength": 90
              },
              "prefix": {},
              "suffix": {},
              "full": {
                "type": "string",
                "minLength": 1
              },
              "display": {
                "type": "string",
                "minLength": 1
              },
              "short": {
                "type": "string"
              }
            },
            "required": [
              "full",
              "display",
              "short"
            ]
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 120,
            "description": "The user's email address"
          },
          "site": {
            "type": "string",
            "minLength": 1
          },
          "department": {
            "type": "string",
            "minLength": 1
          },
          "manager": {
            "type": "string",
            "format": "uuid",
            "default": "null"
          },
          "room": {},
          "mail_stop": {},
          "title": {
            "type": "string",
            "minLength": 1
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "context": {
                  "type": "string",
                  "enum": [
                    "Counterbalance ID",
                    "Microsoft 365"
                  ]
                }
              }
            }
          },
          "milestones": {
            "type": "object",
            "required": [
              "accepted_terms",
              "completed_onboarding",
              "account_created",
              "account_blocked",
              "account_archived",
              "license_assigned"
            ],
            "properties": {
              "accepted_terms": {
                "type": "object",
                "required": [
                  "status",
                  "timestamp"
                ],
                "properties": {
                  "status": {
                    "type": "boolean"
                  },
                  "timestamp": {
                    "type": "number"
                  }
                }
              },
              "completed_onboarding": {
                "type": "object",
                "required": [
                  "status",
                  "timestamp"
                ],
                "properties": {
                  "status": {
                    "type": "boolean"
                  },
                  "timestamp": {
                    "type": "number"
                  }
                }
              },
              "account_created": {
                "type": "object",
                "required": [
                  "status",
                  "timestamp"
                ],
                "properties": {
                  "status": {
                    "type": "boolean"
                  },
                  "timestamp": {
                    "type": "number"
                  }
                }
              },
              "account_blocked": {
                "type": "object",
                "required": [
                  "status",
                  "timestamp"
                ],
                "properties": {
                  "status": {
                    "type": "boolean"
                  },
                  "timestamp": {
                    "type": "number"
                  }
                }
              },
              "account_archived": {
                "type": "object",
                "required": [
                  "status",
                  "timestamp"
                ],
                "properties": {
                  "status": {
                    "type": "boolean"
                  },
                  "timestamp": {
                    "type": "number"
                  }
                }
              },
              "license_assigned": {
                "type": "object",
                "required": [
                  "status",
                  "timestamp"
                ],
                "properties": {
                  "status": {
                    "type": "boolean"
                  },
                  "timestamp": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "required": [
          "site",
          "department",
          "title",
          "links",
          "milestones"
        ],
        "x-examples": {
          "Licensed User Example": {
            "id": "ce48daca-f044-48e6-ad20-0c6e53db12da",
            "license": "seat",
            "flags": {
              "active": true,
              "blocked": false,
              "licensed": true,
              "archived": false,
              "deleted": false
            },
            "picture": "https://api.counterbalance.io/v1/user/ce48daca-f044-48e6-ad20-0c6e53db12da/photo",
            "auth": {
              "email_verified": true,
              "last_login": 1604815512,
              "last_password_reset": 0,
              "last_ip": "67.168.168.228",
              "total_logins": 78,
              "is_blocked": false
            },
            "name": {
              "given": "Alex",
              "preferred": "",
              "middle": "",
              "family": "Wilbur",
              "prefix": null,
              "suffix": null,
              "full": "Alex Wilbur",
              "display": "Alex Wilbur",
              "short": ""
            },
            "email": "alexw@peterbalance.com",
            "site": null,
            "department": "1f3da4db-3364-4f58-b8bd-4fee1398a6e1",
            "manager": null,
            "room": null,
            "mail_stop": null,
            "title": "",
            "links": [
              {
                "context": "Counterbalance ID",
                "id": "auth0|5e93ab33f346950c46b694d5"
              },
              {
                "context": "Microsoft 365",
                "id": "201e0cc6-9b88-4908-a69e-60e88b4d9ff7"
              }
            ],
            "milestones": {
              "accepted_terms": {
                "status": true,
                "timestamp": 1586735922
              },
              "completed_onboarding": {
                "status": false,
                "timestamp": 0
              },
              "account_created": {
                "status": true,
                "timestamp": 1586735922
              },
              "account_blocked": {
                "status": false,
                "timestamp": 0
              },
              "account_archived": {
                "status": false,
                "timestamp": 0
              },
              "license_assigned": {
                "status": true,
                "timestamp": 1586735923
              }
            }
          },
          "Unlicensed User Example": {
            "id": "73f180ba-caa3-4e49-a68c-f643b5e7bf79",
            "license": "record_user",
            "flags": {
              "active": true,
              "blocked": false,
              "licensed": false,
              "archived": false,
              "deleted": false
            },
            "picture": "https://api.counterbalance.io/v1/user/73f180ba-caa3-4e49-a68c-f643b5e7bf79/photo",
            "auth": null,
            "name": {
              "given": "Megan",
              "preferred": "",
              "middle": "",
              "family": "Bowen",
              "prefix": null,
              "suffix": null,
              "full": "Megan Bowen",
              "display": "Megan Bowen",
              "short": ""
            },
            "email": "meganb@peterbalance.com",
            "site": null,
            "department": null,
            "manager": null,
            "room": null,
            "mail_stop": null,
            "title": "",
            "links": [],
            "milestones": {
              "accepted_terms": {
                "status": false,
                "timestamp": 0
              },
              "completed_onboarding": {
                "status": false,
                "timestamp": 0
              },
              "account_created": {
                "status": true,
                "timestamp": 1604882067
              },
              "account_blocked": {
                "status": false,
                "timestamp": 0
              },
              "account_archived": {
                "status": false,
                "timestamp": 0
              },
              "license_assigned": {
                "status": false,
                "timestamp": 0
              }
            }
          }
        },
        "x-tags": [
          "User Accounts"
        ]
      },
      "User-Preferences": {
        "description": "",
        "type": "object",
        "properties": {
          "shell": {
            "type": "object",
            "required": [
              "theme",
              "nav",
              "pagination",
              "disabled_applications"
            ],
            "properties": {
              "theme": {
                "type": "string",
                "minLength": 1
              },
              "nav": {
                "type": "object",
                "required": [
                  "collapsed"
                ],
                "properties": {
                  "collapsed": {
                    "type": "boolean"
                  },
                  "disabled_applications": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "pagination": {
                "type": "object",
                "required": [
                  "enabled",
                  "default_limit"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "default_limit": {
                    "type": "number"
                  }
                }
              },
              "disabled_applications": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        },
        "required": [
          "shell"
        ],
        "title": "User Preferences Object Model",
        "x-examples": {
          "Example": {
            "shell": {
              "theme": "string",
              "nav": {
                "collapsed": true,
                "disabled_applications": [
                  "string"
                ]
              },
              "pagination": {
                "enabled": true,
                "default_limit": 0
              },
              "disabled_applications": [
                {}
              ]
            }
          }
        },
        "x-tags": [
          "User Preferences"
        ]
      },
      "User-Permissions": {
        "title": "User Account Permissions Object Model",
        "type": "array",
        "description": "An array of user account permission strings",
        "x-examples": {
          "Example": [
            "billing:account:view",
            "console:view",
            "hardware:device:read",
            "sites:*",
            "tenant:*",
            "user:account:*"
          ]
        },
        "items": {
          "type": "string"
        },
        "x-tags": [
          "Permissions",
          "Object Models"
        ]
      },
      "User-Assigned-Roles": {
        "title": "User Assigned Roles Object Model",
        "type": "object",
        "description": "",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "x-examples": {
          "Example": {
            "roles": [
              "rol_ef4g..."
            ]
          }
        },
        "x-tags": [
          "Roles",
          "Object Models"
        ]
      },
      "User-Roles-Manifest": {
        "title": "User Roles Manifest",
        "type": "object",
        "description": "",
        "properties": {
          "rev": {
            "type": "string",
            "description": "The release version of the manifest"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User-Roles-Manifest-Item"
            }
          }
        },
        "required": [
          "rev",
          "roles"
        ]
      },
      "User-Roles-Manifest-Item": {
        "title": "User Roles Manifest Item",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Role ID in Auth0"
          },
          "name": {
            "type": "string",
            "description": "The name of the role"
          },
          "description": {
            "type": "string",
            "description": "The description of the role"
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the role is enabled and available for assignment"
          },
          "attributes": {
            "type": "object",
            "required": [
              "management_assigned_only",
              "system_assigned_only",
              "self_removable",
              "subscription_required"
            ],
            "properties": {
              "management_assigned_only": {
                "type": "boolean",
                "description": "Indicates if the role can only be assigned via the management API. These roles are not displayed in the Console UI and cannot be assigned via the core API"
              },
              "system_assigned_only": {
                "description": "Indicates if the role is assigned by default or by some system action. If this is TRUE, self_removable is generally also TRUE",
                "type": "boolean"
              },
              "self_removable": {
                "description": "Indicates if the user can remove the role from themselves. If FALSE, the user must have the role removed by another user with the necessary privilege",
                "type": "boolean"
              },
              "subscription_required": {
                "type": "boolean",
                "description": "Indicates if a tenant subscription is required to assign this role"
              }
            }
          },
          "assignment_prerequisite_roles": {
            "type": "array",
            "description": "An inclusive list of roles that must be previously assigned to the user before the role can be assigned. ",
            "items": {}
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "enabled",
          "attributes",
          "assignment_prerequisite_roles"
        ]
      }
    },
    "securitySchemes": {
      "Bearer Token": {
        "type": "http",
        "scheme": "bearer",
        "description": ""
      }
    }
  },
  "tags": [
    {
      "name": "User Accounts"
    },
    {
      "name": "User Photo"
    },
    {
      "name": "User Preferences"
    },
    {
      "name": "Permissions"
    },
    {
      "name": "Roles"
    },
    {
      "name": "User Licensing"
    },
    {
      "name": "Departments"
    },
    {
      "name": "Groups"
    }
  ]
}