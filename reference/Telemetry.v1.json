{
  "openapi": "3.0.0",
  "info": {
    "title": "Telemetry",
    "version": "1.0",
    "description": "Telemetry and logging allows the collection of data from gateways and on-site systems"
  },
  "servers": [
    {
      "url": "https://api.counterbalance.io",
      "description": "Production API"
    }
  ],
  "paths": {
    "/v1/telemetry/point": {
      "get": {
        "summary": "List Points",
        "responses": {},
        "operationId": "get-point-list",
        "description": "",
        "tags": [
          "Points"
        ]
      },
      "post": {
        "summary": "Create Data Point",
        "operationId": "create-data-point",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400-Invalid-Scope"
          },
          "404": {
            "$ref": "#/components/responses/404-Controller-Not-Found"
          }
        },
        "description": "Create a new telemetry point definition",
        "tags": [
          "Points"
        ]
      }
    },
    "/v1/telemetry/datapoint/{datapointId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pointId"
        }
      ],
      "get": {
        "summary": "Get Data Point Details",
        "tags": [
          "Points"
        ],
        "responses": {},
        "operationId": "get-v1-telemetry-datapoint-datapointId",
        "parameters": [
          {
            "$ref": "#/components/parameters/collectorID"
          }
        ]
      },
      "delete": {
        "summary": "Delete Data Point",
        "operationId": "delete-v1-telemetry-datapoint-datapointId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Points"
        ]
      }
    },
    "/v1/collector": {
      "get": {
        "summary": "List Collectors",
        "tags": [
          "Collectors"
        ],
        "responses": {},
        "operationId": "list-collectors",
        "description": "## Synopsis\nList "
      },
      "post": {
        "summary": "Create Collector",
        "operationId": "create-collector",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create a new Collector for a data point",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "application/json",
            "required": true
          }
        ],
        "tags": [
          "Collectors"
        ]
      }
    },
    "/v1/collector/{collectorId}/sample": {
      "parameters": [
        {
          "$ref": "./Infrastructure.v1.json#/components/parameters/controllerId"
        }
      ],
      "get": {
        "summary": "Get Collector Trend Samples",
        "tags": [
          "Collectors"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-Get-Collector-Samples"
          },
          "404": {
            "$ref": "#/components/responses/404-Collector-Not-Found"
          }
        },
        "operationId": "get-collector-samples",
        "description": "## Synopsis\nRetrieve data samples for the specified collector. \n\n## Prerequsites\n\n## ",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "start",
            "description": "Timestamp for the upper end of the sample response"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "end",
            "description": "Timestamp for the lower end of the sample response"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "duration",
            "description": "The length of the sample (in seconds)"
          }
        ]
      }
    },
    "/v1/collector/{collectorId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/collectorId"
        }
      ],
      "get": {
        "summary": "Get Collector",
        "tags": [],
        "responses": {},
        "operationId": "get-v1-collector-collectorId",
        "description": ""
      },
      "patch": {
        "summary": "Update Collector",
        "operationId": "update-collector",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": ""
      }
    }
  },
  "components": {
    "schemas": {
      "Get-Collector-Samples-Response-Body": {
        "description": "",
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "range": {
            "type": "object",
            "properties": {
              "start": {
                "type": "number"
              },
              "end": {
                "type": "number"
              }
            },
            "required": [
              "start",
              "end"
            ]
          },
          "integrity": {
            "type": "object",
            "properties": {
              "sample_duration": {
                "type": "number"
              },
              "expected_samples": {
                "type": "number"
              },
              "missing_samples": {
                "type": "number"
              },
              "quality": {
                "type": "number"
              }
            },
            "required": [
              "sample_duration",
              "expected_samples",
              "missing_samples",
              "quality"
            ]
          },
          "data": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "required": [
                "id",
                "timestamp",
                "value",
                "event_state"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "minLength": 1
                },
                "timestamp": {
                  "type": "string",
                  "minLength": 1
                },
                "value": {
                  "type": "number"
                },
                "feedback_value": {},
                "state_text": {},
                "event_state": {
                  "type": "string",
                  "minLength": 1
                },
                "priority_array": {},
                "status_flags": {
                  "type": "object",
                  "properties": {
                    "fault": {
                      "type": "boolean"
                    },
                    "in_alarm": {
                      "type": "boolean"
                    },
                    "overridden": {
                      "type": "boolean"
                    },
                    "out_of_service": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "fault",
                    "in_alarm",
                    "overridden",
                    "out_of_service"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "count",
          "range",
          "integrity",
          "data"
        ],
        "title": "Get Collector Samples"
      }
    },
    "parameters": {
      "pointId": {
        "name": "pointId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "168a3e32-996f-410a-a06c-c4cdc10fa362"
        },
        "description": "A valid point UUID"
      },
      "collectorId": {
        "name": "collectorId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "A valid collector UUID"
      }
    },
    "securitySchemes": {
      "Bearer Token": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "400-Invalid-Scope": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../models/Error-Response.v1.yaml"
            },
            "examples": {
              "Response": {
                "value": {
                  "error": {
                    "message": "Invalid object type",
                    "console": "The object type specified is invalid",
                    "code": 400
                  },
                  "logging_hash": "..."
                }
              }
            }
          }
        }
      },
      "404-Controller-Not-Found": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../models/Error-Response.v1.yaml"
            },
            "examples": {
              "Response": {
                "value": {
                  "error": {
                    "message": "Controller not found",
                    "console": "The controller ID ... could not be found in the database",
                    "code": 404
                  },
                  "logging_hash": "..."
                }
              }
            }
          }
        }
      },
      "200-Get-Collector-Samples": {
        "description": "Ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Get-Collector-Samples-Response-Body"
            },
            "examples": {
              "Response": {
                "$ref": "#/components/examples/Get-Collector-Samples"
              }
            }
          }
        }
      },
      "404-Collector-Not-Found": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../models/Error-Response.v1.yaml"
            },
            "examples": {
              "Response": {
                "value": {
                  "error": {
                    "message": "Collector not found",
                    "console": "The collector ID ... could not be found in the database",
                    "code": 404
                  },
                  "logging_hash": "..."
                }
              }
            }
          }
        }
      }
    },
    "examples": {
      "Get-Collector-Samples": {
        "value": {
          "count": 335,
          "range": {
            "start": 1614163800,
            "end": 1614264720
          },
          "integrity": {
            "sample_duration": 100920,
            "expected_samples": 336,
            "missing_samples": 1,
            "quality": 99
          },
          "data": [
            {
              "id": "6fc988a0f34126693318d2df9247f8cc",
              "timestamp": "1614264600",
              "value": 62.6,
              "feedback_value": null,
              "state_text": null,
              "event_state": "normal",
              "priority_array": null,
              "status_flags": {
                "fault": false,
                "in_alarm": false,
                "overridden": false,
                "out_of_service": false
              }
            },
            {
              "id": "bbd4e6fb74ad710553100aace78636ce",
              "timestamp": "1614264300",
              "value": 62.6,
              "feedback_value": null,
              "state_text": null,
              "event_state": "normal",
              "priority_array": null,
              "status_flags": {
                "fault": false,
                "in_alarm": false,
                "overridden": false,
                "out_of_service": false
              }
            }
          ]
        }
      }
    }
  },
  "tags": [
    {
      "name": "Loggers"
    },
    {
      "name": "Collectors"
    },
    {
      "name": "Points"
    }
  ]
}