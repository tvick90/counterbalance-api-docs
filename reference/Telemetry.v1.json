{
  "openapi": "3.0.0",
  "info": {
    "title": "Telemetry",
    "version": "1.1.1",
    "description": "Telemetry and logging allows the collection of data from gateways and on-site systems"
  },
  "servers": [
    {
      "url": "https://api.counterbalance.io",
      "description": "Production API"
    }
  ],
  "paths": {
    "/v1/telemetry/datapoint": {
      "get": {
        "summary": "List Points",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Point-Listing"
                },
                "examples": {
                  "Response": {
                    "$ref": "#/components/examples/Get-Point-List"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-point-list",
        "description": "### Synopsis\nList points\n\n### Prerequisites\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`telemetry:*`,`telemetry:datapoint:*`,`telemetry:datapoint:list`\n* One or more BACnet data points",
        "tags": [
          "Points"
        ],
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "query",
            "name": "controller",
            "description": "Return points connected to the specified controller ID"
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "query",
            "name": "site",
            "description": "Return points associated with the specified site ID"
          }
        ]
      },
      "post": {
        "summary": "Create Point",
        "operationId": "create-data-point",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400-Invalid-Scope"
          },
          "404": {
            "$ref": "#/components/responses/404-Controller-Not-Found"
          }
        },
        "description": "### Synopsis\nCreate a new point definition\n\n### Prerequisites\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`telemetry:*`,`telemetry:datapoint:*`,`telemetry:datapoint:create`\n* A registered gateway connected to the Internet\n* A connected BACnet field controller\n* Adequate point quota",
        "tags": [
          "Points"
        ],
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "object_type": {
                    "type": "number",
                    "enum": [
                      "0",
                      "1",
                      "2",
                      "3",
                      "4",
                      "5",
                      "14",
                      "17",
                      "19"
                    ],
                    "format": "double"
                  },
                  "instance": {
                    "type": "string"
                  },
                  "site": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "controller": {
                    "type": "string",
                    "format": "uuid",
                    "example": "48f6bef2-1d57-4333-b9af-be687876e997"
                  }
                },
                "required": [
                  "name",
                  "object_type",
                  "instance",
                  "controller"
                ]
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/v1/telemetry/datapoint/{pointId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pointId"
        }
      ],
      "get": {
        "summary": "Get Point",
        "tags": [
          "Points"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Point-Details"
                },
                "examples": {
                  "Analog Input": {
                    "$ref": "#/components/examples/Get-Analog-Input-Point"
                  },
                  "Analog Input Online": {
                    "$ref": "#/components/examples/Get-Analog-Input-Point-Online"
                  },
                  "Binary Output Online": {
                    "$ref": "#/components/examples/Get-Binary-Output-Point-Online"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404-Point-Not-Found"
          }
        },
        "operationId": "get-point",
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": "false"
            },
            "in": "query",
            "name": "online",
            "description": "Fetch the latest BACnet data for the point"
          }
        ],
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "description": "### Synopsis\nRetrieve a point\n\n### Prerequisites\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`telemetry:*`,`telemetry:datapoint:*`,`telemetry:datapoint:read`\n* A registered gateway connected to the Internet\n* A connected BACnet field controller (if `online` is true)\n* One or more commandable BACnet data points\n\n### Online BACnet Data\nEach BACnet object type will return a variable BACnet response body depending on the parameters present and supported by the target field controller. \n\nSeveral response examples are provided to illustrate the variety of paremeters available."
      },
      "delete": {
        "summary": "Delete Point",
        "operationId": "delete-point",
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404-Point-Not-Found"
          }
        },
        "tags": [
          "Points"
        ],
        "description": "### Synopsis\nDelete a point\n\n### Prerequisites\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`telemetry:*`,`telemetry:datapoint:*`,`telemetry:datapoint:delete`\n* One or more BACnet data points",
        "security": [
          {
            "Bearer Token": []
          }
        ]
      },
      "patch": {
        "summary": "Update Point",
        "operationId": "update-point",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Point-Details"
                },
                "examples": {
                  "Response": {
                    "$ref": "#/components/examples/Get-Analog-Input-Point"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404-Point-Not-Found"
          }
        },
        "description": "### Synopsis\nUpdate a point\n\n### Prerequisites\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`telemetry:*`,`telemetry:datapoint:*`,`telemetry:datapoint:update`\n* One or more BACnet data points\n\n<!-- theme: warning -->\n\n> _This endpoint will only update the Counterbalance definition of a defined point. This will not update the BACnet definition on the device. Future endpoints are planned to permit online BACnet updates._",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "tags": [
          "Points"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the point"
                  },
                  "description": {
                    "type": "string",
                    "description": "A brief description of the point"
                  },
                  "resolution": {
                    "type": "string",
                    "description": "The display and collection resolution for analog points (decimal places)"
                  },
                  "site": {
                    "type": "string",
                    "format": "uuid",
                    "description": "A valid site UUID to assign the point to"
                  },
                  "instance_id": {
                    "type": "number",
                    "description": "The BACnet object instance ID"
                  }
                }
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "SEA.RMT",
                    "description": "ROOM TEMP",
                    "site": "82478e3a-a212-41bf-9e2b-7522a1504a6b"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "application/json"
          }
        ]
      }
    },
    "/v1/telemetry/collector": {
      "get": {
        "summary": "List Collectors",
        "tags": [
          "Collectors"
        ],
        "responses": {},
        "operationId": "list-collectors",
        "description": "### Synopsis\nList ",
        "security": [
          {
            "Bearer Token": []
          }
        ]
      },
      "post": {
        "summary": "Create Collector",
        "operationId": "create-collector",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "### Synopsis\nCreate a new Collector for a data point\n\n### Prerequisites",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "application/json",
            "required": true
          }
        ],
        "tags": [
          "Collectors"
        ]
      },
      "parameters": []
    },
    "/v1/telemetry/collector/{collectorId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/collectorId"
        }
      ],
      "get": {
        "summary": "Get Collector",
        "tags": [
          "Collectors"
        ],
        "responses": {},
        "operationId": "get-collector",
        "description": "",
        "security": [
          {
            "Bearer Token": []
          }
        ]
      },
      "patch": {
        "summary": "Update Collector",
        "operationId": "update-collector",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "",
        "tags": [
          "Collectors"
        ],
        "security": [
          {
            "Bearer Token": []
          }
        ]
      }
    },
    "/v1/telemetry/collector/{collectorId}/sample": {
      "parameters": [
        {
          "$ref": "#/components/parameters/collectorId"
        }
      ],
      "get": {
        "summary": "Sample Collector Data",
        "tags": [
          "Collectors"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-Get-Collector-Samples"
          },
          "404": {
            "$ref": "#/components/responses/404-Collector-Not-Found"
          }
        },
        "operationId": "get-collector-samples",
        "description": "### Synopsis\nRetrieve data samples for the specified collector. \n\n### Prerequsites\n\n### Adjusting the Sample Window\nBy default, with no query parameters specified, sample data for the last 12 hours is returned. \n\nThis sample window can be adjusted using query parameters in two ways.\n\n#### Sample a Fixed Date Range\nThis is how you do it\n\n#### Sample a Relative Date Range\nA relative range can be sampled using a `start` date and a `duration` in seconds. ",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "start",
            "description": "Timestamp for the upper end of the sample response"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "end",
            "description": "Timestamp for the lower end of the sample response"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "duration",
            "description": "The length of the sample (in seconds)"
          }
        ],
        "security": [
          {
            "Bearer Token": []
          }
        ]
      }
    },
    "/v1/telemetry/datapoint/{pointId}/command": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pointId"
        }
      ],
      "put": {
        "summary": "Command Point",
        "operationId": "command-point",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "description": "Indicates the status of the request, produced by the gateway"
                    }
                  },
                  "required": [
                    "status"
                  ]
                },
                "examples": {
                  "Response Success": {
                    "value": {
                      "status": true
                    }
                  },
                  "Response Fail": {
                    "value": {
                      "status": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/Error-Response.v1.yaml"
                },
                "examples": {
                  "Invalid Parameters": {
                    "value": {
                      "error": {
                        "message": "One or more required parameters are missing",
                        "console": "Check the request body and try again",
                        "code": 400
                      },
                      "logging_hash": "..."
                    }
                  },
                  "Invalid Operation": {
                    "value": {
                      "error": {
                        "message": "Invalid operation requested",
                        "console": "Only command and relinquish are supported",
                        "code": 400
                      },
                      "logging_hash": "..."
                    }
                  },
                  "Point Not Commandable": {
                    "value": {
                      "error": {
                        "message": "Datapoint not commandable",
                        "console": "This datapoint is not commandable",
                        "code": 400
                      },
                      "logging_hash": "..."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404-Point-Not-Found"
          }
        },
        "tags": [
          "Points"
        ],
        "description": "### Synopsis\nCommand or release a point\n\n### Prerequisites\nThe following prerequisites are required for this endpoint:\n\n* An active tenant account\n* Permissions _(at least one):_ `*`,`telemetry:*`,`telemetry:datapoint:*`,`telemetry:datapoint:command`\n* A registered gateway connected to the Internet\n* A connected BACnet field controller\n* One or more commandable BACnet data points\n\n### Commandable Points\nThe table below defines the BACnet object types compatible with this endpoint. Support for enumerated values is planned for a future release.\n\n| Object Type | Description |\n|-----|---------------|\n| `1` | Analog Output |\n| `2` | Analog Value |\n| `4` | Binary Output |\n| `5` | Binary Value |\n\n### Supported Command Priorities\nAll sixteen BACnet command priorities are supported. \n\n### Command vs Relinquish\nThe `operation` body parameter accepts two values: `command` or `relinquish`\n\n#### Command a New Value\nTo command a data point to a new value, set `operation` to `command` in the request body and include the desired priority and new value. The new value will be added to the command priority array at the requested priority and any previous value at the same priority is overwritten. \n\n#### Relinqush a Set Value\nTo relinquish a command priority, set `operation` to `relinquish` in the request body and include the desired priority. The requested priority will be set to _null_ in the command priority array.",
        "security": [
          {
            "Bearer Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Command-Point-Request-Body"
              },
              "examples": {
                "Command Point Example": {
                  "$ref": "#/components/examples/Put-Command-Point"
                },
                "Relinquish Point Example": {
                  "$ref": "#/components/examples/Put-Relinquish-Point"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Get-Collector-Samples-Response-Body": {
        "description": "",
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "range": {
            "type": "object",
            "properties": {
              "start": {
                "type": "number"
              },
              "end": {
                "type": "number"
              }
            },
            "required": [
              "start",
              "end"
            ]
          },
          "integrity": {
            "type": "object",
            "properties": {
              "sample_duration": {
                "type": "number"
              },
              "expected_samples": {
                "type": "number"
              },
              "missing_samples": {
                "type": "number"
              },
              "quality": {
                "type": "number"
              }
            },
            "required": [
              "sample_duration",
              "expected_samples",
              "missing_samples",
              "quality"
            ]
          },
          "data": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "required": [
                "id",
                "timestamp",
                "value",
                "event_state"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "minLength": 1
                },
                "timestamp": {
                  "type": "string",
                  "minLength": 1
                },
                "value": {
                  "type": "number"
                },
                "feedback_value": {},
                "state_text": {},
                "event_state": {
                  "type": "string",
                  "minLength": 1
                },
                "priority_array": {},
                "status_flags": {
                  "type": "object",
                  "properties": {
                    "fault": {
                      "type": "boolean"
                    },
                    "in_alarm": {
                      "type": "boolean"
                    },
                    "overridden": {
                      "type": "boolean"
                    },
                    "out_of_service": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "fault",
                    "in_alarm",
                    "overridden",
                    "out_of_service"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "count",
          "range",
          "integrity",
          "data"
        ],
        "title": "Get Collector Samples"
      },
      "Command-Point-Request-Body": {
        "description": "",
        "type": "object",
        "title": "Command Point Request Body",
        "properties": {
          "operation": {
            "type": "string",
            "minLength": 1,
            "description": "The desired operation, either command or relinquish",
            "enum": [
              "command",
              "relinquish"
            ]
          },
          "value": {
            "type": "number"
          },
          "priority": {
            "type": "number",
            "description": "The target command priority",
            "format": "double",
            "example": 8,
            "minimum": 1,
            "maximum": 16
          }
        },
        "required": [
          "operation",
          "priority"
        ]
      },
      "Point-Details": {
        "description": "",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1
          },
          "controller": {
            "type": "string",
            "minLength": 1
          },
          "created": {
            "type": "number"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "instance_id": {
            "type": "number"
          },
          "object_type": {
            "type": "number"
          },
          "site": {
            "type": "string",
            "minLength": 1
          },
          "is_online": {
            "type": "boolean"
          },
          "bacnet": {
            "type": "object",
            "properties": {
              "object": {
                "type": "object",
                "properties": {
                  "instance": {
                    "type": "number"
                  },
                  "type": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "instance",
                  "type",
                  "name",
                  "description"
                ]
              },
              "telemetry": {
                "type": "object",
                "properties": {
                  "present_value": {
                    "type": "number"
                  },
                  "reliability": {
                    "type": "string",
                    "minLength": 1
                  },
                  "device_type": {
                    "type": "string",
                    "minLength": 1
                  },
                  "event_state": {
                    "type": "string",
                    "minLength": 1
                  },
                  "state_text": {
                    "type": "array",
                    "items": {
                      "required": [],
                      "properties": {}
                    }
                  },
                  "polarity": {
                    "type": "string",
                    "minLength": 1
                  },
                  "feedback_value": {
                    "type": "number"
                  },
                  "relinquish_default": {
                    "type": "number"
                  }
                },
                "required": [
                  "present_value",
                  "reliability",
                  "device_type",
                  "event_state",
                  "state_text",
                  "polarity",
                  "feedback_value",
                  "relinquish_default"
                ]
              },
              "status": {
                "type": "object",
                "properties": {
                  "in_alarm": {
                    "type": "boolean"
                  },
                  "fault": {
                    "type": "boolean"
                  },
                  "out_of_service": {
                    "type": "boolean"
                  },
                  "overridden": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "in_alarm",
                  "fault",
                  "out_of_service",
                  "overridden"
                ]
              },
              "priority_array": {
                "type": "array",
                "items": {
                  "required": [],
                  "properties": {}
                }
              },
              "alarming": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "acked_transitions": {
                    "type": "object",
                    "properties": {
                      "to_normal": {
                        "type": "boolean"
                      },
                      "to_offnormal": {
                        "type": "boolean"
                      },
                      "to_fault": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "to_normal",
                      "to_offnormal",
                      "to_fault"
                    ]
                  },
                  "notify": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "minLength": 1
                      },
                      "notification_class": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "type",
                      "notification_class"
                    ]
                  },
                  "time_delay": {
                    "type": "number"
                  }
                },
                "required": [
                  "enabled",
                  "acked_transitions",
                  "notify",
                  "time_delay"
                ]
              },
              "totalization": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "elapsed_active_time": {
                    "type": "number"
                  },
                  "last_reset": {
                    "type": "number"
                  },
                  "ealpsed_inactive_time": {
                    "type": "number"
                  }
                },
                "required": [
                  "enabled",
                  "elapsed_active_time",
                  "last_reset",
                  "ealpsed_inactive_time"
                ]
              }
            },
            "required": [
              "object",
              "telemetry",
              "status",
              "priority_array",
              "alarming",
              "totalization"
            ]
          }
        },
        "required": [
          "id",
          "controller",
          "created",
          "name",
          "description",
          "instance_id",
          "object_type",
          "site",
          "is_online",
          "bacnet"
        ],
        "title": "Point Details"
      },
      "Point-Listing": {
        "description": "",
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "data": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "required": [
                "id",
                "controller",
                "created",
                "name",
                "description",
                "object_type",
                "instance_id",
                "site"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "minLength": 1
                },
                "controller": {
                  "type": "string",
                  "minLength": 1
                },
                "created": {
                  "type": "number"
                },
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "description": {
                  "type": "string"
                },
                "object_type": {
                  "type": "number"
                },
                "instance_id": {
                  "type": "number"
                },
                "site": {
                  "type": "string",
                  "minLength": 1
                },
                "bacnet": {}
              }
            }
          }
        },
        "required": [
          "count",
          "data"
        ],
        "title": "Point Listing"
      }
    },
    "parameters": {
      "pointId": {
        "name": "pointId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "168a3e32-996f-410a-a06c-c4cdc10fa362"
        },
        "description": "A valid point UUID"
      },
      "collectorId": {
        "name": "collectorId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "A valid collector UUID"
      }
    },
    "securitySchemes": {
      "Bearer Token": {
        "type": "http",
        "scheme": "bearer",
        "description": ""
      }
    },
    "responses": {
      "400-Invalid-Scope": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../models/Error-Response.v1.yaml"
            },
            "examples": {
              "Response": {
                "value": {
                  "error": {
                    "message": "Invalid object type",
                    "console": "The object type specified is invalid",
                    "code": 400
                  },
                  "logging_hash": "..."
                }
              }
            }
          }
        }
      },
      "404-Controller-Not-Found": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../models/Error-Response.v1.yaml"
            },
            "examples": {
              "Response": {
                "value": {
                  "error": {
                    "message": "Controller not found",
                    "console": "The controller ID ... could not be found in the database",
                    "code": 404
                  },
                  "logging_hash": "..."
                }
              }
            }
          }
        }
      },
      "200-Get-Collector-Samples": {
        "description": "Ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Get-Collector-Samples-Response-Body"
            },
            "examples": {
              "Response": {
                "$ref": "#/components/examples/Get-Collector-Samples"
              }
            }
          }
        }
      },
      "404-Collector-Not-Found": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../models/Error-Response.v1.yaml"
            },
            "examples": {
              "Response": {
                "value": {
                  "error": {
                    "message": "Collector not found",
                    "console": "The collector ID ... could not be found in the database",
                    "code": 404
                  },
                  "logging_hash": "..."
                }
              }
            }
          }
        }
      },
      "400-Non-Commandable-Point": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../models/Error-Response.v1.yaml"
            },
            "examples": {
              "Response": {
                "value": {
                  "error": {
                    "message": "Datapoint not commandable",
                    "console": "string",
                    "code": 0
                  },
                  "logging_hash": null
                }
              }
            }
          }
        }
      },
      "404-Point-Not-Found": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../models/Error-Response.v1.yaml"
            },
            "examples": {
              "Response": {
                "value": {
                  "error": {
                    "message": "Datapoint not found",
                    "console": "The datapoint ID ... could not be found in the database",
                    "code": 404
                  },
                  "logging_hash": "..."
                }
              }
            }
          }
        }
      }
    },
    "examples": {
      "Get-Collector-Samples": {
        "value": {
          "count": 335,
          "range": {
            "start": 1614163800,
            "end": 1614264720
          },
          "integrity": {
            "sample_duration": 100920,
            "expected_samples": 336,
            "missing_samples": 1,
            "quality": 99
          },
          "data": [
            {
              "id": "6fc988a0f34126693318d2df9247f8cc",
              "timestamp": "1614264600",
              "value": 62.6,
              "feedback_value": null,
              "state_text": null,
              "event_state": "normal",
              "priority_array": null,
              "status_flags": {
                "fault": false,
                "in_alarm": false,
                "overridden": false,
                "out_of_service": false
              }
            },
            {
              "id": "bbd4e6fb74ad710553100aace78636ce",
              "timestamp": "1614264300",
              "value": 62.6,
              "feedback_value": null,
              "state_text": null,
              "event_state": "normal",
              "priority_array": null,
              "status_flags": {
                "fault": false,
                "in_alarm": false,
                "overridden": false,
                "out_of_service": false
              }
            }
          ]
        }
      },
      "Put-Relinquish-Point": {
        "value": {
          "operation": "relinquish",
          "priority": 8
        }
      },
      "Put-Command-Point": {
        "value": {
          "operation": "command",
          "value": 1,
          "priority": 8
        }
      },
      "Get-Analog-Input-Point-Online": {
        "value": {
          "id": "168a3e32-996f-410a-a06c-c4cdc10fa362",
          "controller": "4f668b28-c30d-4fc1-b751-7cc30dcc4964",
          "created": 1613745301,
          "name": "SEA.HWS.T",
          "description": "HW SUPPLY TEMP",
          "instance_id": 5,
          "object_type": 0,
          "site": "82478e3a-a212-41bf-9e2b-7522a1504a6b",
          "is_online": true,
          "bacnet": {
            "object": {
              "instance": 5,
              "type": 0,
              "name": "SEA.HWS.T",
              "description": "HW SUPPLY TEMP"
            },
            "telemetry": {
              "present_value": 109.2,
              "reliability": "no fault detected",
              "device_type": "10k Thermister",
              "event_state": "normal",
              "units": {
                "raw": "degrees fahrenheit",
                "formatted": "DEG F"
              }
            },
            "status": {
              "in_alarm": false,
              "fault": false,
              "out_of_service": false,
              "overridden": false
            },
            "alarming": {
              "enabled": true,
              "acked_transitions": {
                "to_normal": true,
                "to_offnormal": true,
                "to_fault": true
              },
              "notify": {
                "type": "alarm",
                "notification_class": 0
              },
              "time_delay": 30,
              "limits": {
                "high": 160,
                "low": 45
              },
              "deadband": 1,
              "event_timestamps": {
                "to_off_normal": 5838048000,
                "to_normal": 5838048000,
                "to_fault": 5838048000
              }
            },
            "totalization": {
              "enabled": true,
              "elapsed_active_time": 0,
              "last_reset": 0,
              "ealpsed_inactive_time": 0
            }
          }
        }
      },
      "Get-Binary-Output-Point-Online": {
        "value": {
          "id": "f0b51e0d-1b3d-464e-9e6d-fef693f412b7",
          "controller": "4f668b28-c30d-4fc1-b751-7cc30dcc4964",
          "created": 1614441878,
          "name": "SEA.SRV.ALARM",
          "description": "SRV ALARM LIGHT",
          "instance_id": 5,
          "object_type": 4,
          "site": "82478e3a-a212-41bf-9e2b-7522a1504a6b",
          "is_online": true,
          "bacnet": {
            "object": {
              "instance": 5,
              "type": 4,
              "name": "SEA.SRV.ALARM",
              "description": "SRV ALARM LIGHT"
            },
            "telemetry": {
              "present_value": 0,
              "reliability": "no fault detected",
              "device_type": "LDO",
              "event_state": "normal",
              "state_text": [
                "NORMAL",
                "ALARM"
              ],
              "polarity": "normal",
              "feedback_value": 0,
              "relinquish_default": 0
            },
            "status": {
              "in_alarm": false,
              "fault": false,
              "out_of_service": false,
              "overridden": false
            },
            "priority_array": [
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null
            ],
            "alarming": {
              "enabled": true,
              "acked_transitions": {
                "to_normal": true,
                "to_offnormal": true,
                "to_fault": true
              },
              "notify": {
                "type": "alarm",
                "notification_class": 0
              },
              "time_delay": 0
            },
            "totalization": {
              "enabled": true,
              "elapsed_active_time": 0,
              "last_reset": 0,
              "ealpsed_inactive_time": 0
            }
          }
        }
      },
      "Get-Analog-Input-Point": {
        "value": {
          "id": "2044bcaf-4c60-4901-8f8c-350f17172263",
          "controller": "4f668b28-c30d-4fc1-b751-7cc30dcc4964",
          "created": 1613745308,
          "name": "SEA.RMT",
          "description": "ROOM TEMP",
          "instance_id": 0,
          "object_type": 0,
          "site": "82478e3a-a212-41bf-9e2b-7522a1504a6b",
          "is_online": true,
          "bacnet": null
        }
      },
      "Get-Point-List": {
        "value": {
          "count": 13,
          "data": [
            {
              "id": "0247cd05-409b-4c20-ade8-56d170fb9970",
              "controller": "48f6bef2-1d57-4333-b9af-be687876e997",
              "created": 1614381639,
              "name": "SEA.EF1.SS",
              "description": "",
              "object_type": 4,
              "instance_id": 2,
              "site": "82478e3a-a212-41bf-9e2b-7522a1504a6b",
              "bacnet": null
            },
            {
              "id": "15732bb9-22f6-4fac-a66a-deb342cbce54",
              "controller": "4f668b28-c30d-4fc1-b751-7cc30dcc4964",
              "created": 1613745322,
              "name": "SEA.LGT2.DO",
              "description": "",
              "object_type": 4,
              "instance_id": 4,
              "site": "82478e3a-a212-41bf-9e2b-7522a1504a6b",
              "bacnet": null
            },
            {
              "...": null
            }
          ]
        }
      }
    }
  },
  "tags": [
    {
      "name": "Loggers"
    },
    {
      "name": "Points"
    },
    {
      "name": "Collectors"
    }
  ]
}