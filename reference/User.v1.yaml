openapi: 3.0.0
info:
  title: Users
  version: 1.1.1
  description: Create and manage user accounts
servers:
  - url: 'https://api.counterbalance.io'
    description: Production API
paths:
  /v1/user:
    get:
      summary: Get User Account Listing
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  count:
                    type: number
                  data:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    description: An array of user account objects
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          minLength: 1
                          description: ''
                          format: uuid
                        license:
                          type: string
                          minLength: 1
                          enum:
                            - record_user
                            - user
                            - seat
                        flags:
                          type: object
                          properties:
                            active:
                              type: boolean
                            blocked:
                              type: boolean
                            licensed:
                              type: boolean
                            archived:
                              type: boolean
                            deleted:
                              type: boolean
                          required:
                            - active
                            - blocked
                            - licensed
                            - archived
                            - deleted
                        picture:
                          type: string
                          minLength: 1
                        name:
                          type: object
                          properties:
                            given:
                              type: string
                              minLength: 1
                            preferred:
                              type: string
                            middle:
                              type: string
                            family:
                              type: string
                              minLength: 1
                            prefix: {}
                            suffix: {}
                            full:
                              type: string
                              minLength: 1
                            display:
                              type: string
                              minLength: 1
                            short:
                              type: string
                          required:
                            - given
                            - preferred
                            - middle
                            - family
                            - full
                            - display
                            - short
                        email:
                          type: string
                          minLength: 1
                        site:
                          type:
                            - string
                            - 'null'
                          format: uuid
                          default: 'null'
                        department:
                          type:
                            - string
                            - 'null'
                          minLength: 1
                          default: 'null'
                          format: uuid
                        manager:
                          type:
                            - string
                            - 'null'
                        room:
                          type: string
                        mail_stop:
                          type: string
                        title:
                          type: string
                          minLength: 1
                        employee_id:
                          type: string
                        org_guid:
                          type: string
                        links:
                          type: array
                          items:
                            type: object
                      required:
                        - id
                        - license
                        - picture
                        - email
                        - site
                        - department
                        - title
                        - employee_id
                        - org_guid
                required:
                  - count
                  - data
              examples:
                Response:
                  value: {}
          headers: {}
      operationId: get-v1-user
      security:
        - Bearer Token: []
      description: Return a list of user accounts available to the authenticated user
    post:
      summary: Create New User
      operationId: post-v1-user
      responses:
        '201':
          description: Created
      description: |-
        Create a new user and optionally assign a license and password

        > This body field `password` is only required if the `type` specified is equal to `seat` or `user`
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                given_name:
                  type: string
                  minLength: 1
                  maxLength: 90
                  description: The user's first name
                family_name:
                  type: string
                  minLength: 1
                  maxLength: 90
                  description: The user's last name
                email:
                  type: string
                  format: email
                title:
                  type: string
                type:
                  type: string
                  enum:
                    - record_user
                    - seat
                    - user
                password:
                  type: string
                  format: password
                  description: Required for "seat" and "user" types
              required:
                - given_name
                - family_name
                - email
                - type
        description: '**Request** body description...'
      parameters: []
      security:
        - Bearer Token: []
  '/v1/user/{userId}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: userId
        in: path
        required: true
        description: The user's UUID
    get:
      summary: Get User Account
      tags: []
      responses: {}
      operationId: get-v1-user-userId
      parameters: []
      description: |-
        Retrieve a user account by ID

        > This endpoint accepts `self` in place of a UUID
      security:
        - Bearer Token: []
    patch:
      summary: Update User Account
      operationId: patch-v1-user-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-Account'
                type: object
      description: |-
        Update a user account by ID

        > This endpoint accepts `self` in place of a UUID
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                given_name:
                  type: string
                  minLength: 1
                  description: The user's first name
                family_name:
                  type: string
                  minLength: 1
                  description: The user's last name
                title:
                  type: string
                  description: The user's job title
                  maxLength: 90
                middle_name:
                  type: string
                  description: The user's middle name
                preferred_given_name:
                  type: string
                  description: The user's preferred first name
      security:
        - Bearer Token: []
    delete:
      summary: Delete User Account
      operationId: delete-v1-user-userId
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: 'null'
      description: Delete a user by ID
      security:
        - Bearer Token: []
  '/v1/user/{userId}/license':
    parameters:
      - schema:
          type: string
          format: uuid
        name: userId
        in: path
        required: true
        description: The user's UUID
    put:
      summary: Attach User Licensing
      operationId: put-v1-user-userId-license
      responses: {}
      description: |-
        Assign a license to a user.

        > **Note** This body field `password` is only required if the `type` specified is equal to `seat` or `user`

        > **Note** Downgrading a user to the `record_user` class will remove their login account
      security:
        - Bearer Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: The type of license to assign the user
                  enum:
                    - record_user
                    - user
                    - seat
                password:
                  type: string
                  format: password
                  description: Required for "seat" and "user" types
              required:
                - type
  '/v1/user/{userId}/photo':
    parameters:
      - schema:
          type: string
          format: uuid
        name: userId
        in: path
        required: true
        description: The user's UUID
    get:
      summary: Get User Photo
      tags: []
      responses:
        '200':
          description: OK
          headers: {}
      operationId: get-v1-user-userId-photo
      description: Get a user's avatar photo by ID
      parameters: []
    post:
      summary: Upload a Custom Photo
      operationId: post-v1-user-userId-photo
      responses:
        '200':
          description: OK
          headers: {}
      security:
        - Bearer Token: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
          application/octet-stream:
            schema:
              type: object
  '/v1/user/{userId}/roles':
    parameters:
      - schema:
          type: string
          format: uuid
        name: userId
        in: path
        required: true
        description: The user's UUID
    get:
      summary: Get User's Assigned Roles
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: get-v1-user-userId-roles
      description: |-
        Retrieve a list of roles assigned to a user

        > This endpoint accepts `self` in place of a UUID
      security:
        - Bearer Token: []
      parameters: []
    put:
      summary: Assign User Roles
      operationId: put-v1-user-userId-roles
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  description: An array of role IDs to add
                  uniqueItems: true
                  minItems: 1
                  maxItems: 10
                  items:
                    type: string
              required:
                - roles
        description: ''
      security:
        - Bearer Token: []
      parameters: []
      description: Assign one or more roles to a user
    delete:
      summary: Remove User Roles
      operationId: delete-v1-user-userId-roles
      responses:
        '200':
          description: OK
      description: Remove one or more roles from a user
      security:
        - Bearer Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  minItems: 1
                  uniqueItems: true
                  maxItems: 10
                  items:
                    type: string
              required:
                - roles
        description: ''
  /v1/user/self/preferences:
    parameters: []
    get:
      summary: Get User Preferences
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: object
                properties: {}
            text/html:
              schema:
                type: object
                properties: {}
      operationId: get-v1-user-userId-preferences
      description: Get user preferences
      security:
        - Bearer Token: []
    patch:
      summary: Update User Preferences
      operationId: patch-v1-user-self-preferences
      responses:
        '200':
          description: OK
      description: Update user preferences
      security:
        - Bearer Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
  '/v1/user/{userId}/permissions':
    parameters:
      - schema:
          type: string
          format: uuid
        name: userId
        in: path
        required: true
        description: The user's UUID
    get:
      summary: Get User Permissions
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-v1-user-userId-permissions
      description: |-
        Retreieve permissions for a given user

        > This endpoint accepts `self` in place of a UUID
      security:
        - Bearer Token: []
components:
  schemas:
    User-Account:
      description: A typical user account object
      type: object
      title: Complete User Account
      properties:
        id:
          type: string
          format: uuid
          description: The user's UUID
        license:
          type: string
          enum:
            - record_user
            - user
            - seat
          description: The assigned license class
        flags:
          type: object
          properties:
            active:
              type: boolean
            blocked:
              type: boolean
            licensed:
              type: boolean
            archived:
              type: boolean
            deleted:
              type: boolean
        picture:
          type: string
          minLength: 1
          description: The URL for the user's avatar photo
        auth: {}
        name:
          type: object
          properties:
            given:
              type: string
              maxLength: 90
            preferred:
              type: string
              maxLength: 90
            middle:
              type: string
              maxLength: 90
            family:
              type: string
              maxLength: 90
            prefix: {}
            suffix: {}
            full:
              type: string
              minLength: 1
            display:
              type: string
              minLength: 1
            short:
              type: string
          required:
            - full
            - display
            - short
        email:
          type: string
          format: email
          maxLength: 120
          description: The user's email address
        site:
          type: string
          minLength: 1
        department:
          type: string
          minLength: 1
        manager:
          type: string
          format: uuid
          default: 'null'
        room: {}
        mail_stop: {}
        title:
          type: string
          minLength: 1
        links:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              context:
                type: string
                enum:
                  - Counterbalance ID
                  - Microsoft 365
        milestones:
          type: object
          required:
            - accepted_terms
            - completed_onboarding
            - account_created
            - account_blocked
            - account_archived
            - license_assigned
          properties:
            accepted_terms:
              type: object
              required:
                - status
                - timestamp
              properties:
                status:
                  type: boolean
                timestamp:
                  type: number
            completed_onboarding:
              type: object
              required:
                - status
                - timestamp
              properties:
                status:
                  type: boolean
                timestamp:
                  type: number
            account_created:
              type: object
              required:
                - status
                - timestamp
              properties:
                status:
                  type: boolean
                timestamp:
                  type: number
            account_blocked:
              type: object
              required:
                - status
                - timestamp
              properties:
                status:
                  type: boolean
                timestamp:
                  type: number
            account_archived:
              type: object
              required:
                - status
                - timestamp
              properties:
                status:
                  type: boolean
                timestamp:
                  type: number
            license_assigned:
              type: object
              required:
                - status
                - timestamp
              properties:
                status:
                  type: boolean
                timestamp:
                  type: number
      required:
        - site
        - department
        - title
        - links
        - milestones
  securitySchemes:
    Bearer Token:
      type: http
      scheme: bearer
      description: ''
